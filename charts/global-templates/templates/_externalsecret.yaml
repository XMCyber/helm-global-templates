{{/*
Copyright (C) 2025 XM Cyber
Author: Devops Infra Team
*/}}

{{- define "global-templates.remoteRef" -}}
{{- $remoteRef := .remoteRef }}
{{- $global_values := .global }}
{{- $default_values := .defaults -}}
remoteRef:
  key: {{ include "helpers.renderGlobalIfExists" (dict "value" (required "remoteRef.key is required for ExternalSecret" $remoteRef.key) "global" $global_values) -}}
  {{- if $remoteRef.version }}
  version: {{ $remoteRef.version -}}
  {{- end }}
  {{- if $remoteRef.property }}
  property: {{ $remoteRef.property -}}
  {{- end }}
  {{- if $remoteRef.decodingStrategy }}
  decodingStrategy: {{ $remoteRef.decodingStrategy -}}
  conversionStrategy: {{ $remoteRef.conversionStrategy | default $default_values.remoteRef.conversionStrategy -}}
  metadataPolicy: {{ $remoteRef.metadataPolicy | default $default_values.remoteRef.metadataPolicy -}}
  {{- end -}}
{{- end -}}

{{- define "global-templates.externalsecret" -}}
{{- $files := .Files }}
{{- $global_values := .Values.global }}
{{- $default_values := .Values.externalsecret_defaults }}
{{- $common_defaults := .Values.common_defaults | default dict }}
{{- range .externalsecrets }}
{{- if not .disabled }}
{{- $externalsecret := . }}
{{- if not (or (hasKey . "data") (hasKey . "dataFrom")) }}
{{- fail "Either data or dataFrom must be provided for ExternalSecret" }}
{{- end }}
{{- $namespace := .namespace | default "" }}
{{- $namespaces := .namespaces | default (list) }}
{{- if and (empty $namespace) (eq (len $namespaces) 0) }}
  {{- $namespaces = list (include "helpers.namespace" (dict "ns" .namespace "overrideNs" $.Release.Namespace )) }}
{{- else if not (empty $namespace) }}
  {{- $namespaces = list $namespace }}
{{- end }}
{{- range $ns := $namespaces }}
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: {{ required "Name is required for external secret" $externalsecret.name }}
  namespace: {{ include "helpers.prefixNamespace" (dict "namespace" $ns "global" $global_values) }}
  labels: {{- include "helpers.labels" (dict "context" $ "customLabels" $externalsecret.labels "defaultLabels" $common_defaults.labels) | nindent 4 }}
  {{- if or $externalsecret.annotations $common_defaults.annotations }}
  annotations: 
    {{ include "helpers.annotations" (dict "context" $ "customAnnotations" $externalsecret.annotations "defaultAnnotations" $common_defaults.annotations) | nindent 4 }}
  {{- end }}
spec:
  refreshInterval: {{ $externalsecret.refreshInterval | default $default_values.refreshInterval }}
  secretStoreRef:
    name: {{ include "helpers.renderGlobalIfExists" (dict "value" (required "secretStoreRef.name is required for ExternalSecret" $externalsecret.secretStoreRef.name) "global" $global_values) }}
    kind: {{ $externalsecret.secretStoreRef.kind | default $default_values.secretStoreRef.kind }}
  target:
    name: {{ $externalsecret.target.name | default $externalsecret.name }}
    creationPolicy: {{ $externalsecret.target.creationPolicy | default $default_values.target.creationPolicy }}
    {{- if $externalsecret.target.template }}
    template: {{- toYaml $externalsecret.target.template | nindent 6 }}
    {{- end }}
  {{- if $externalsecret.data }}
  data:
    {{- if kindIs "map" $externalsecret.data }}
    {{- range $key, $value := $externalsecret.data }}
    - secretKey: {{ $key -}}
      {{- include "global-templates.remoteRef" (dict "remoteRef" $value.remoteRef "global" $global_values "defaults" $default_values) | nindent 6 -}}
    {{- end }}
    {{- else if kindIs "slice" $externalsecret.data }}
    {{- range $entry := $externalsecret.data }}
    - secretKey: {{ $entry.secretKey -}}
      {{- include "global-templates.remoteRef" (dict "remoteRef" $entry.remoteRef "global" $global_values "defaults" $default_values) | nindent 6 -}}
    {{- end }}
    {{- else }}
    {{- fail "data must be either a map or a list" }}
    {{- end }}
  {{- end }}
  {{- if $externalsecret.dataFrom }}
  dataFrom:
    {{- range $externalsecret.dataFrom }}
    {{- if .extract }}
    - extract:
        key: {{ include "helpers.renderGlobalIfExists" (dict "value" (required "key is required for ExternalSecret dataFrom extract" .extract.key) "global" $global_values) }}
    {{- end }}
    {{- end }}
  {{- end }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}
