suite: Test statefulset template
templates:
  - template.yaml

tests:
  - it: should create basic statefulset correctly
    values:
      - statefulset_values.yaml
    asserts:
      - equal:
          path: kind
          value: StatefulSet
      - equal:
          path: apiVersion
          value: apps/v1
      - equal:
          path: metadata.name
          value: my-statefulset
      - equal:
          path: metadata.namespace
          value: test-namespace

  - it: should set annotations correctly
    values:
      - statefulset_values.yaml
    set:
      statefulsets.my-statefulset.annotations:
        test-annotation: test-value
    asserts:
      - equal:
          path: metadata.annotations.test-annotation
          value: test-value

  - it: should configure containers correctly
    values:
      - statefulset_values.yaml
    asserts:
      - equal:
          path: spec.template.spec.containers[0].name
          value: my-app-container
      - equal:
          path: spec.template.spec.containers[0].image
          value: docker.io/busybox:1.0.0
      - equal:
          path: spec.template.spec.containers[0].ports[0].containerPort
          value: 8080
      - equal:
          path: spec.template.spec.containers[0].imagePullPolicy
          value: Always

  - it: should set init containers correctly
    values:
      - statefulset_values.yaml
    asserts:
      - equal:
          path: spec.template.spec.initContainers[0].name
          value: init-db
      - equal:
          path: spec.template.spec.initContainers[0].image
          value: docker.io/busybox:1.0.0
      - equal:
          path: spec.template.spec.initContainers[0].command[0]
          value: "/bin/sh"
      - equal:
          path: spec.template.spec.initContainers[0].envFrom[0].configMapRef.name
          value: init-db-config
      - equal:
          path: spec.template.spec.initContainers[0].envFrom[1].secretRef.name
          value: init-db-secret
      - equal:
          path: spec.template.spec.initContainers[0].envFrom[2].configMapRef.name
          value: init-db-config-rendered

  - it: should set volumes and mounts correctly
    values:
      - statefulset_values.yaml
    asserts:
      - equal:
          path: spec.template.spec.volumes[0].name
          value: config-volume
      - equal:
          path: spec.volumeClaimTemplates[0].metadata.name
          value: my-pvc
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[0].name
          value: config-volume
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[0].mountPath
          value: /config

  - it: should set projected volumes correctly
    values:
      - statefulset_values.yaml
    asserts:
      - equal:
          path: spec.template.spec.volumes[1].name
          value: projected-volume
      - equal:
          path: spec.template.spec.volumes[1].projected.sources[0].secret.name
          value: mysecret
      - equal:
          path: spec.template.spec.volumes[1].projected.sources[0].secret.items[0].key
          value: username
      - equal:
          path: spec.template.spec.volumes[1].projected.sources[0].secret.items[0].path
          value: my-group/my-username

  - it: should set affinity rules correctly
    values:
      - statefulset_values.yaml
    asserts:
      - equal:
          path: spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms[0].matchExpressions[0].key
          value: kubernetes.io/e2e-az-name

  - it: should set security context correctly
    values:
      - statefulset_values.yaml
    asserts:
      - equal:
          path: spec.template.spec.securityContext.runAsNonRoot
          value: true
      - equal:
          path: spec.template.spec.containers[0].securityContext.allowPrivilegeEscalation
          value: false

  - it: should set imagePullSecrets correctly
    values:
      - statefulset_values.yaml
    asserts:
      - equal:
          path: spec.template.spec.imagePullSecrets[0].name
          value: my-secret

  - it: should set persistentVolumeClaimRetentionPolicy correctly
    values:
      - statefulset_values.yaml
    asserts:
      - equal:
          path: spec.persistentVolumeClaimRetentionPolicy.whenDeleted
          value: Delete
      - equal:
          path: spec.persistentVolumeClaimRetentionPolicy.whenScaled
          value: Retain

  - it: should not render statefulset if disabled
    values:
      - statefulset_values.yaml
    set:
      statefulsets.my-statefulset.disabled: true
    asserts:
      - hasDocuments:
          count: 0

  - it: should set valueFrom correctly
    values:
      - statefulset_values.yaml
    asserts:
      - equal:
          path: spec.template.spec.containers[0].env[1].name
          value: key
      - equal:
          path: spec.template.spec.containers[0].env[1].valueFrom.configMapKeyRef.name
          value: app-config
      - equal:
          path: spec.template.spec.containers[0].env[1].valueFrom.configMapKeyRef.key
          value: keyRef
      - equal:
          path: spec.template.spec.containers[0].env[2].name
          value: key2
      - equal:
          path: spec.template.spec.containers[0].env[2].valueFrom.secretKeyRef.name
          value: app-secret
      - equal:
          path: spec.template.spec.containers[0].env[2].valueFrom.secretKeyRef.key
          value: key2Ref

  - it: should set livenessProbe correctly
    values:
      - statefulset_values.yaml
    asserts:
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.httpGet.path
          value: /health
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.httpGet.port
          value: 8080
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.initialDelaySeconds
          value: 15

  - it: should set readinessProbe correctly
    values:
      - statefulset_values.yaml
    asserts:
      - equal:
          path: spec.template.spec.containers[0].readinessProbe.httpGet.path
          value: /ready
      - equal:
          path: spec.template.spec.containers[0].readinessProbe.httpGet.port
          value: 8080
      - equal:
          path: spec.template.spec.containers[0].readinessProbe.initialDelaySeconds
          value: 5

  - it: should set secret volume with items correctly
    values:
      - statefulset_values.yaml
    asserts:
      - equal:
          path: spec.template.spec.volumes[2].name
          value: secret-volume
      - equal:
          path: spec.template.spec.volumes[2].secret.secretName
          value: my-secret
      - equal:
          path: spec.template.spec.volumes[2].secret.items[0].key
          value: config.yml
      - equal:
          path: spec.template.spec.volumes[2].secret.items[0].path
          value: config.yml
      - equal:
          path: spec.template.spec.volumes[2].secret.items[1].key
          value: data.json
      - equal:
          path: spec.template.spec.volumes[2].secret.items[1].path
          value: data.json
      - equal:
          path: spec.template.spec.volumes[2].secret.items[2].key
          value: no-path-key
      - notExists:
          path: spec.template.spec.volumes[2].secret.items[2].path

  - it: should set secret volume without items correctly
    values:
      - statefulset_values.yaml
    asserts:
      - equal:
          path: spec.template.spec.volumes[3].name
          value: secret-volume-no-items
      - equal:
          path: spec.template.spec.volumes[3].secret.secretName
          value: my-secret-no-items
      - notExists:
          path: spec.template.spec.volumes[3].secret.items

  - it: should render global values correctly in volumeMounts for containers
    values:
      - statefulset_values.yaml
    set:
      global:
        volume-prefix: global-vol
        mount-base: /global/mount
        sub-path: global-config
      statefulsets.my-statefulset.containers.api-container.volumeMounts:
        config-volume:
          name: "{{ global.volume-prefix }}-config"
          mountPath: "{{ global.mount-base }}/config"
          subPath: "{{ global.sub-path }}/app.conf"
    
    asserts:
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[0].name
          value: global-vol-config
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[0].mountPath
          value: /global/mount/config
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[0].subPath
          value: global-config/app.conf

  - it: should render global values correctly in volumeMounts for initContainers
    values:
      - statefulset_values.yaml
    set:
      global:
        init-volume: init-vol
        init-mount: /init/mount
        init-subpath: init-config
      statefulsets.my-statefulset.initContainers:
        - name: init-db
          image:
            registry: docker.io
            repository: busybox
            tag: 1.0.0
          command: 
            - "/bin/sh"
            - -c
            - "echo 'db initialized'"
          volumeMounts:
            - name: "{{ global.init-volume }}-data"
              mountPath: "{{ global.init-mount }}/data"
              subPath: "{{ global.init-subpath }}/init.conf"
    
    asserts:
      - equal:
          path: spec.template.spec.initContainers[0].volumeMounts[0].name
          value: init-vol-data
      - equal:
          path: spec.template.spec.initContainers[0].volumeMounts[0].mountPath
          value: /init/mount/data
      - equal:
          path: spec.template.spec.initContainers[0].volumeMounts[0].subPath
          value: init-config/init.conf

  - it: should allow replicas to be set to 0
    values:
      - statefulset_values.yaml
    set:
      statefulsets.my-statefulset.replicas: 0
    asserts:
      - equal:
          path: spec.replicas
          value: 0

  - it: should set hostAliases correctly
    values:
      - statefulset_values.yaml
    asserts:
      - equal:
          path: spec.template.spec.hostAliases[0].ip
          value: "127.0.0.1"
      - equal:
          path: spec.template.spec.hostAliases[0].hostnames[0]
          value: "localhost"
      - equal:
          path: spec.template.spec.hostAliases[0].hostnames[1]
          value: "stateful.local"

  - it: should render global values in hostAliases correctly
    values:
      - statefulset_values.yaml
    set:
      global:
        cache-ip: "192.168.1.200"
        cache-hostname: "cache.example.com"
        domain: "example.com"
    asserts:
      - equal:
          path: spec.template.spec.hostAliases[1].ip
          value: "192.168.1.200"
      - equal:
          path: spec.template.spec.hostAliases[1].hostnames[0]
          value: "cache.example.com"
      - equal:
          path: spec.template.spec.hostAliases[1].hostnames[1]
          value: "cache.example.com"

  - it: should not render hostAliases if not specified
    values:
      - statefulset_values.yaml
    set:
      statefulsets.my-statefulset.hostAliases: null
    asserts:
      - notExists:
          path: spec.template.spec.hostAliases

  - it: should render global placeholders in annotations
    values:
      - statefulset_values.yaml
    set:
      global:
        storage:
          class: "fast-ssd"
          size: "100Gi"
        database:
          type: "postgresql"
          version: "13.4"
      statefulsets.my-statefulset.annotations:
        statefulset.storage-class: "{{global.storage.class}}"
        statefulset.storage-size: "{{global.storage.size}}"
        statefulset.db-type: "{{global.database.type}}"
        statefulset.db-version: "{{global.database.version}}"
        statefulset.config: "{{global.database.type}} v{{global.database.version}} on {{global.storage.class}}"
    asserts:
      - equal:
          path: metadata.annotations["statefulset.storage-class"]
          value: fast-ssd
      - equal:
          path: metadata.annotations["statefulset.storage-size"]
          value: 100Gi
      - equal:
          path: metadata.annotations["statefulset.db-type"]
          value: postgresql
      - equal:
          path: metadata.annotations["statefulset.db-version"]
          value: "13.4"
      - equal:
          path: metadata.annotations["statefulset.config"]
          value: "postgresql v13.4 on fast-ssd"
