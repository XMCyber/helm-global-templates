suite: Test deployment template
templates:
  - template.yaml
  
tests:
  - it: should create basic deployment correctly
    values:
      - deployment_values.yaml
    asserts:
      - equal:
          path: kind
          value: Deployment
      - equal:
          path: apiVersion
          value: apps/v1
      - equal:
          path: metadata.name
          value: api
      - equal:
          path: metadata.namespace
          value: test-namespace
      - equal:
          path: metadata.labels.app
          value: api

  - it: should set annotations correctly
    values:
      - deployment_values.yaml
    set:
      deployments.api.annotations:
        test-annotation: test-value
    asserts:
      - equal:
          path: metadata.annotations.test-annotation
          value: test-value
  
  - it: should set reloader annotation correctly
    values:
      - deployment_values.yaml
    set:
      deployments.api.reloaderEnabled: true
    asserts:
      - equal:
          path: metadata.annotations["reloader.stakater.com/auto"]
          value: "true"

  - it: should configure containers correctly
    values:
      - deployment_values.yaml
    asserts:
      - equal:
          path: spec.template.spec.containers[0].name
          value: api-container
      - equal:
          path: spec.template.spec.containers[0].image
          value: docker.io/busybox:1.0.0
      - equal:
          path: spec.template.spec.containers[0].ports[0].containerPort
          value: 8080
      - equal:
          path: spec.template.spec.containers[0].imagePullPolicy
          value: Always

  - it: should set init containers correctly
    values:
      - deployment_values.yaml
    asserts:
      - equal:
          path: spec.template.spec.initContainers[0].name
          value: init-db
      - equal:
          path: spec.template.spec.initContainers[0].image
          value: docker.io/busybox:1.0.0
      - equal:
          path: spec.template.spec.initContainers[0].command[0]
          value: /bin/sh

  - it: should set volumes and mounts correctly
    values:
      - deployment_values.yaml
    asserts:
      - equal:
          path: spec.template.spec.volumes[0].name
          value: config-volume
      - equal:
          path: spec.template.spec.volumes[0].configMap.name
          value: app-config
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[0].name
          value: config-volume
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[0].mountPath
          value: /config

  - it: should set affinity rules correctly
    values:
      - deployment_values.yaml
    asserts:
      - equal:
          path: spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms[0].matchExpressions[0].key
          value: kubernetes.io/e2e-az-name

  - it: should set security context correctly
    values:
      - deployment_values.yaml
    asserts:
      - equal:
          path: spec.template.spec.securityContext.runAsNonRoot
          value: true
      - equal:
          path: spec.template.spec.containers[0].securityContext.allowPrivilegeEscalation
          value: false

  - it: should render global values correctly to env vars
    values:
      - deployment_values.yaml
    set:
      global:
        global-var: rendered

      deployments.api.containers.api-container.env:
        - name: GLOBAL_VAR
          value: I love {{ global.global-var }} values!
        - name: GLOBAL_VAR2
          value: I love {{global.global-var}} values!
        - name: GLOBAL_VAR3
          value: I love {{global.not-exists}} values!
        - name: GLOBAL_VAR3
          value: I love {{ global.not-exists }} values!
    asserts:
      - equal:
          path: "spec.template.spec.containers[0].env[0].value"
          value: I love rendered values!
      - equal:
          path: "spec.template.spec.containers[0].env[1].value"
          value: I love rendered values!
      - equal:
          path: "spec.template.spec.containers[0].env[2].value"
          value: I love {{global.not-exists}} values!
      - equal:
          path: "spec.template.spec.containers[0].env[3].value"
          value: I love {{ global.not-exists }} values! 